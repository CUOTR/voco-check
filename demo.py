# -*- coding: utf-8 -*-
"""Demo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KehcQOusck9efNRvNyB-PZFGv3waEC0K
"""

import pandas as pd
import random
import re

# ƒê∆∞·ªùng d·∫´n file Excel
file_path = '/Everyday language.xlsx'

def normalize(text):
    if isinstance(text, str):
        return re.sub(r'\s+', ' ', text.strip().lower())
    return ''

def load_data(sheet_choice):
    sheets_to_read = [f"Sheet{i}" for i in range(1, sheet_choice + 1)]
    df_list = []
    for sheet in sheets_to_read:
        try:
            df = pd.read_excel(file_path, sheet_name=sheet)
            df.columns = ['Vocabulary', 'Phonetic', 'Meaning', 'Example']
            df = df.dropna()
            df_list.append(df)
        except Exception as e:
            print(f"Cannot read {sheet}: {e}")
    combined_df = pd.concat(df_list, ignore_index=True)
    for col in ['Vocabulary', 'Phonetic', 'Meaning', 'Example']:
        combined_df[col + '_norm'] = combined_df[col].apply(normalize)
    return combined_df

def get_random_entries(df, exclude_indexes, count):
    attempts = 0
    selected = []
    used_texts = set()

    while len(selected) < count and attempts < 10000:
        idx = random.randint(0, len(df) - 1)
        if idx in exclude_indexes or idx in selected:
            attempts += 1
            continue

        row = df.iloc[idx]
        key_texts = [row['Vocabulary_norm'], row['Phonetic_norm'], row['Example_norm']]

        if any(text in used_texts for text in key_texts):
            attempts += 1
            continue

        selected.append(idx)
        used_texts.update(key_texts)
        attempts = 0  # reset sau khi ch·ªçn th√†nh c√¥ng

    if len(selected) < count:
        print(f"\n‚ùå Kh√¥ng th·ªÉ ch·ªçn ƒë·ªß {count} c√¢u h·ªèi h·ª£p l·ªá. D·ªØ li·ªáu hi·ªán t·∫°i c√≥ th·ªÉ kh√¥ng ƒë·ªß.\n")
        return None
    return selected

def run_quiz(df, indexes, mode='vocab_to_meaning'):
    print("\nüëâ Tr·∫£ l·ªùi 25 c√¢u h·ªèi. Kh√¥ng ph·∫£n h·ªìi ƒë√∫ng/sai cho ƒë·∫øn khi k·∫øt th√∫c.\n")
    results = []

    for i, idx in enumerate(indexes, 1):
        row = df.iloc[idx]
        if mode == 'vocab_to_meaning':
            prompt_type = random.choice(['Vocabulary', 'Phonetic', 'Example'])
            prompt = row[prompt_type]
            correct_answer = row['Meaning_norm']
            show_answer = row['Meaning']
            question = f"{i}. {prompt_type}: {prompt}\n   ‚Üí Nghƒ©a l√† g√¨? "
        else:
            prompt = row['Meaning']
            correct_answer = row['Vocabulary_norm']
            show_answer = row['Vocabulary']
            question = f"{i}. Nghƒ©a: {prompt}\n   ‚Üí T·ª´ v·ª±ng l√† g√¨? "

        user_input = normalize(input(question))
        is_correct = user_input == correct_answer
        results.append((i, is_correct, show_answer))

    correct_count = sum(1 for _, ok, _ in results if ok)
    print(f"\nüéØ B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {correct_count}/25 c√¢u.")
    if correct_count >= 20:
        print("üéâ B·∫°n ƒë√£ v∆∞·ª£t qua b√†i ki·ªÉm tra!\n")
    else:
        print("üîÅ B·∫°n ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra.\n")

    if correct_count < 25:
        print("üìå Nh·ªØng c√¢u b·∫°n ƒë√£ tr·∫£ l·ªùi sai:")
        for i, ok, correct in results:
            if not ok:
                print(f"  - C√¢u {i}: ƒê√°p √°n ƒë√∫ng l√†: {correct}")

    return set(indexes)

def main():
    print("üìù CH∆Ø∆†NG TR√åNH H·ªåC T·ª™ V·ª∞NG\n")
    while True:
        try:
            sheet_num = int(input("Ch·ªçn s·ªë sheet mu·ªën h·ªçc (1‚Äì10): "))
            if 1 <= sheet_num <= 10:
                break
            else:
                print("‚ùó Nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 10.")
        except:
            print("‚ùó Vui l√≤ng nh·∫≠p s·ªë.")

    df = load_data(sheet_num)
    print(f"‚úÖ ƒê√£ t·∫£i {len(df)} t·ª´ v·ª±ng t·ª´ {sheet_num} sheet.")

    round_num = 1
    while True:
        print(f"\nüîÑ V√íNG KI·ªÇM TRA {round_num}")

        print("\n--- KI·ªÇM TRA 1: Cho t·ª´/phi√™n √¢m/v√≠ d·ª• ‚Üí t√¨m nghƒ©a ---")
        used_indexes = get_random_entries(df, set(), 25)
        if used_indexes is None:
            break
        used_set = run_quiz(df, used_indexes, mode='vocab_to_meaning')

        print("\n--- KI·ªÇM TRA 2: Cho nghƒ©a ‚Üí t√¨m t·ª´ v·ª±ng ---")
        remaining_indexes = get_random_entries(df, used_set, 25)
        if remaining_indexes is None:
            break
        run_quiz(df, remaining_indexes, mode='meaning_to_vocab')

        again = input("\nüëâ B·∫°n c√≥ mu·ªën l√†m ti·∫øp v√≤ng ki·ªÉm tra kh√°c? (y/n): ").strip().lower()
        if again != 'y':
            print("\nüëã K·∫øt th√∫c ch∆∞∆°ng tr√¨nh. H·∫πn g·∫∑p l·∫°i!")
            break

        round_num += 1

if __name__ == "__main__":
    main()