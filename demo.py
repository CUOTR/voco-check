import streamlit as st
import pandas as pd
import random
import re

# ====== C·∫•u h√¨nh ======
FILE_NAME = "Everyday language.xlsx"

# ====== H√†m x·ª≠ l√Ω ======

def normalize(text):
    if isinstance(text, str):
        return re.sub(r'\s+', ' ', text.strip().lower())
    return ""

def load_data(sheet_choice):
    dfs = []
    for i in range(1, sheet_choice + 1):
        try:
            df = pd.read_excel(FILE_NAME, sheet_name=f"Sheet{i}")
            df.columns = ['Vocabulary', 'Phonetic', 'Meaning', 'Example']
            df.dropna(inplace=True)
            for col in ['Vocabulary', 'Phonetic', 'Meaning', 'Example']:
                df[col + "_norm"] = df[col].apply(normalize)
            dfs.append(df)
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc Sheet{i}: {e}")
    return pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame()

def get_random_entries(df, exclude_idxs, count):
    selected = []
    used_texts = set()
    tries = 0
    while len(selected) < count and tries < 1000:
        idx = random.randint(0, len(df) - 1)
        if idx in exclude_idxs:
            tries += 1
            continue
        row = df.iloc[idx]
        key_texts = {row['Vocabulary_norm'], row['Phonetic_norm'], row['Example_norm']}
        if used_texts & key_texts:
            tries += 1
            continue
        selected.append(idx)
        used_texts.update(key_texts)
        tries = 0
    return selected

# ====== Giao di·ªán ======

st.set_page_config(page_title="·ª®ng d·ª•ng h·ªçc t·ª´ v·ª±ng", layout="centered")

st.title("üìù CH∆Ø∆†NG TR√åNH H·ªåC T·ª™ V·ª∞NG")

# ====== Kh·ªüi t·∫°o tr·∫°ng th√°i ======

if "step" not in st.session_state:
    st.session_state.step = 0
if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame()
if "quiz1_indexes" not in st.session_state:
    st.session_state.quiz1_indexes = []
if "quiz2_indexes" not in st.session_state:
    st.session_state.quiz2_indexes = []
if "answers1" not in st.session_state:
    st.session_state.answers1 = {}
if "answers2" not in st.session_state:
    st.session_state.answers2 = {}

# ====== B∆∞·ªõc 0: Ch·ªçn Sheet ======

if st.session_state.step == 0:
    sheet_num = st.number_input("Ch·ªçn s·ªë sheet mu·ªën h·ªçc (1‚Äì10):", min_value=1, max_value=10, step=1)
    if st.button("B·∫Øt ƒë·∫ßu"):
        df = load_data(sheet_num)
        if len(df) < 50:
            st.error("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o 2 b√†i ki·ªÉm tra.")
        else:
            st.session_state.data = df
            st.session_state.step = 1
            st.rerun()

# ====== B∆∞·ªõc 1: T·∫°o ki·ªÉm tra 1 ======

elif st.session_state.step == 1:
    st.subheader("üìö KI·ªÇM TRA 1: Cho t·ª´ ‚Üí Ch·ªçn nghƒ©a")
    df = st.session_state.data
    indexes = get_random_entries(df, exclude_idxs=set(), count=25)
    if len(indexes) < 25:
        st.error("Kh√¥ng th·ªÉ ch·ªçn ƒë·ªß 25 c√¢u h·ªèi h·ª£p l·ªá. D·ªØ li·ªáu c√≥ th·ªÉ b·ªã tr√πng l·∫∑p qu√° nhi·ªÅu.")
    else:
        st.session_state.quiz1_indexes = indexes
        st.session_state.answers1 = {}
        st.session_state.step = 2
        st.rerun()

# ====== B∆∞·ªõc 2: L√†m ki·ªÉm tra 1 ======

elif st.session_state.step == 2:
    st.subheader("üìö KI·ªÇM TRA 1: Tr·∫£ l·ªùi c√°c c√¢u h·ªèi")
    df = st.session_state.data
    answers = st.session_state.answers1
    for i, idx in enumerate(st.session_state.quiz1_indexes, 1):
        row = df.iloc[idx]
        kind = random.choice(["Vocabulary", "Phonetic", "Example"])
        prompt = row[kind]
        key = f"q1_{i}"
        answers[key] = st.text_input(f"{i}. {kind}: {prompt}", value=answers.get(key, ""))

    if st.button("Ki·ªÉm tra k·∫øt qu·∫£"):
        st.session_state.answers1 = answers
        st.session_state.step = 3
        st.rerun()

# ====== B∆∞·ªõc 3: K·∫øt qu·∫£ ki·ªÉm tra 1 ======

elif st.session_state.step == 3:
    st.subheader("‚úÖ K·∫æT QU·∫¢ KI·ªÇM TRA 1")
    df = st.session_state.data
    correct = 0
    wrong_list = []
    for i, idx in enumerate(st.session_state.quiz1_indexes, 1):
        row = df.iloc[idx]
        key = f"q1_{i}"
        user_ans = normalize(st.session_state.answers1.get(key, ""))
        if user_ans == row['Meaning_norm']:
            correct += 1
        else:
            wrong_list.append((i, row['Meaning'], st.session_state.answers1.get(key, "")))

    st.write(f"üéØ B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {correct}/25 c√¢u.")
    st.success("üéâ B·∫°n ƒë√£ v∆∞·ª£t qua b√†i ki·ªÉm tra!") if correct >= 20 else st.warning("‚ùå B·∫°n ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra.")

    if wrong_list:
        st.write("### ‚ùå Nh·ªØng c√¢u tr·∫£ l·ªùi sai:")
        for i, correct_ans, user_ans in wrong_list:
            st.write(f"- C√¢u {i}: ƒê√°p √°n ƒë√∫ng: **{correct_ans}** | B·∫°n tr·∫£ l·ªùi: `{user_ans}`")

    if st.button("Ti·∫øp t·ª•c ki·ªÉm tra 2"):
        st.session_state.step = 4
        st.rerun()

# ====== B∆∞·ªõc 4: T·∫°o ki·ªÉm tra 2 ======

elif st.session_state.step == 4:
    st.subheader("üìò KI·ªÇM TRA 2: Cho nghƒ©a ‚Üí Ch·ªçn t·ª´")
    df = st.session_state.data
    used = set(st.session_state.quiz1_indexes)
    indexes = get_random_entries(df, exclude_idxs=used, count=25)
    if len(indexes) < 25:
        st.error("Kh√¥ng th·ªÉ ch·ªçn ƒë·ªß 25 c√¢u h·ªèi h·ª£p l·ªá cho ki·ªÉm tra 2.")
    else:
        st.session_state.quiz2_indexes = indexes
        st.session_state.answers2 = {}
        st.session_state.step = 5
        st.rerun()

# ====== B∆∞·ªõc 5: L√†m ki·ªÉm tra 2 ======

elif st.session_state.step == 5:
    st.subheader("üìò KI·ªÇM TRA 2: Tr·∫£ l·ªùi c√°c c√¢u h·ªèi")
    df = st.session_state.data
    answers = st.session_state.answers2
    for i, idx in enumerate(st.session_state.quiz2_indexes, 1):
        row = df.iloc[idx]
        key = f"q2_{i}"
        answers[key] = st.text_input(f"{i}. Nghƒ©a: {row['Meaning']}", value=answers.get(key, ""))

    if st.button("Ki·ªÉm tra k·∫øt qu·∫£ ki·ªÉm tra 2"):
        st.session_state.answers2 = answers
        st.session_state.step = 6
        st.rerun()

# ====== B∆∞·ªõc 6: K·∫øt qu·∫£ ki·ªÉm tra 2 ======

elif st.session_state.step == 6:
    st.subheader("‚úÖ K·∫æT QU·∫¢ KI·ªÇM TRA 2")
    df = st.session_state.data
    correct = 0
    wrong_list = []
    for i, idx in enumerate(st.session_state.quiz2_indexes, 1):
        row = df.iloc[idx]
        key = f"q2_{i}"
        user_ans = normalize(st.session_state.answers2.get(key, ""))
        if user_ans == row['Vocabulary_norm']:
            correct += 1
        else:
            wrong_list.append((i, row['Vocabulary'], st.session_state.answers2.get(key, "")))

    st.write(f"üéØ B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng {correct}/25 c√¢u.")
    st.success("üéâ B·∫°n ƒë√£ v∆∞·ª£t qua b√†i ki·ªÉm tra!") if correct >= 20 else st.warning("‚ùå B·∫°n ch∆∞a v∆∞·ª£t qua b√†i ki·ªÉm tra.")

    if wrong_list:
        st.write("### ‚ùå Nh·ªØng c√¢u tr·∫£ l·ªùi sai:")
        for i, correct_ans, user_ans in wrong_list:
            st.write(f"- C√¢u {i}: ƒê√°p √°n ƒë√∫ng: **{correct_ans}** | B·∫°n tr·∫£ l·ªùi: `{user_ans}`")

    if st.button("L√†m l·∫°i t·ª´ ƒë·∫ßu"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()
